Canton,AutosuficienciaIIngreso,AutosuficienciaFinanciera,AhorroCorrient,Dependencia,IncidenciaGasto,EficienciaIngreso,LimiteServicio,StockDeuda,EficienciaRecaudacion,IncidenciaCartera,EstadoCatastro,CuentaTarjetas,EstableceCEM
ALFREDO BAQUERIZO MORENO, 16.62   , 10.60   , 31.27   , 97.44   , 47.96   ,83.59,4.4,18.8,23.8,217.4,0,0,0
BALAO, 88.24   , 59.10   , 74.17   , 83.09   , 82.11   ,73.6,4.18,77,58.1,69.8,50,0,0
BALZAR, 300.11   , 219.56   , 253.31   , 64.94   , 50.60   ,107.21,2.62,23.46,79.4,3.81,16.67,0,0
COLIMES, 84.26   , 61.95   , 117.76   , 86.60   , 42.12   ,92.09,4.19,24,44.3,56.7,60,0,50
CORONEL MARCELINO MARIDUEÑA, 98.72   , 66.53   , 75.72   , 78.78   , 22.34   ,71.59,4.8,26,13.7,30.8,65,0,50
DAULE, 184.95   , 88.70   , 105.24   , 69.33   , 7.22   ,135.21,10.36,123.2,54.5,56.8,60,0,0
DURAN, 223.66   , 118.74   , 136.93   , 57.46   , 18.79   ,89.31,6.69,34.7,58.8,106.8,55.3,50,50
EL EMPALME, 48.98   , 38.52   , 66.73   , 90.65   , 33.00   ,80.27,20.75,57.54,54.14,18.21,33.33,0,50
EL TRIUNFO, 79.22   , 52.35   , 83.65   , 83.12   , 14.66   ,99.11,11.12,18.54,37.9,12.27,0,0,0
GENERAL ANTONIO ELIZALDE, 73.57   , 53.44   , 96.29   , 77.73   , 0.86   ,63.29,2.09,32.8,69.8,0,0,0,50
ISIDRO AYORA, 20.99   , 14.71   , 31.12   , 95.25   , 28.91   ,60.41,2.25,3.3,63.1,29.2,37.9,0,0
LOMAS DE SARGENTILLO, 55.56   , 42.01   , 65.88   , 83.12   , 37.86   ,81.19,0,25.58,93.6,71.59,18.18,0,0
MILAGRO, 174.30   , 129.80   , 172.82   , 86.36   , 35.01   ,93.7,1.43,5.9,77.7,77.8,54,0,50
NARANJAL, 158.63   , 108.76   , 128.88   , 78.03   , 23.35   ,106.79,6.04,3.3,58.1,28.7,5,0,50
NARANJITO, 55.78   , 33.49   , 66.99   , 93.07   , 18.83   ,109.93,6.5,68.1,61.2,46.3,40,0,50
NOBOL, 116.18   , 61.88   , 101.56   , 83.55   , 41.91   ,96.08,8.92,36.4,74.2,127.3,27,0,0
PALESTINA, 83.31   , 59.43   , 100.82   , 89.07   , 27.48   ,85.87,11.07,20.2,44,104,44,0,0
PEDRO CARBO, 111.96   , 79.87   , 136.16   , 89.98   , 29.50   ,102.35,11.25,20.1,82.3,79.2,50,0,0
PLAYAS, 528.08   , 318.27   , 335.90   , 54.14   , 81.42   ,46.35,0.94,23.7,36.3,166.8,75,0,50
SALITRE, 25.79   , 15.56   , 76.61   , 96.80   , 35.27   ,113.97,11.08,29.7,37,220.7,8.3,0,0
SAMBORONDON, 711.94   , 270.96   , 281.16   , 32.18   , 44.38   ,289.04,4.93,28.9,61.2,27.1,100,50,50
SAN JACINTO DE YAGUACHI, 54.70   , 45.54   , 129.30   , 95.39   , 41.87   ,84.3,3.06,16.5,0,382.7,60.4,0,0
SANTA LUCIA, 32.73   , 22.74   , 108.74   , 96.86   , 21.65   ,101.47,6.24,13.1,28.43,148.7,38.46,0,0
SIMON BOLIVAR, 47.95   , 33.83   , 108.62   , 93.98   , 19.42   ,117.36,2.1,41.3,43.6,248,50,0,50
datos <- read.csv("~/Downloads/datos.csv")
View(datos)
datos
par(mfrow=c(1,2))
boxplot(AutosuficienciaIIngreso)
boxplot(datos$AutosuficienciaIIngreso)
hist(datos$AutosuficienciaIIngreso))
hist(datos$AutosuficienciaIIngreso)
boxplot(datos$AutosuficienciaFinanciera)
hist(datos$AutosuficienciaFinanciera)
boxplot(datos$AhorroCorrient)
hist(datos$AhorroCorrient)
boxplot(datos$Dependencia)
hist(datos$Dependencia)
boxplot(datos$IncidenciaGasto)
hist(datos$IncidenciaGasto)
boxplot(datos$EficienciaIngreso)
hist(datos$EficienciaIngreso)
boxplot(datos$LimiteServicio)
hist(datos$LimiteServicio)
boxplot(datos$StockDeuda)
hist(datos$StockDeuda)
boxplot(datos$EficienciaRecaudacion)
hist(datos$EficienciaRecaudacion)
boxplot(datos$IncidenciaCartera)
hist(datos$IncidenciaCartera)
boxplot(datos$EstadoCatastro)
hist(datos$EstadoCatastro)
boxplot(datos$CuentaTarjetas)
hist(datos$CuentaTarjetas)
boxplot(datos$EstableceCEM)
hist(datos$EstableceCEM)
datos2=datos
row.names(datos2)=datos2$Canton
datos2=datos[,2:14]
datos2=scale(datos2)
d <- dist(as.matrix(datos2))
hc <- hclust(d)
plot(hc)
datos2
row.names(datos2)=datos$Canton
datos2
d <- dist(as.matrix(datos2))
hc <- hclust(d)
plot(hc)
par()
plot(hc)
par(mfrow=c(1,1))
plot(hc)
TO <- read.table("~/Downloads/observacion.txt", header=T, quote="\"")
View(TO)
observacion <- read.delim("~/Downloads/observacion.txt")
View(observacion)
TO=observacion
library(tm)
myCorpus <- tm_map(TO, tolower)
myCorpus <- tm_map(TO[,1], tolower)
myCorpus <- tm_map(Corpus(TO[,1]), tolower)
myCorpus <- Corpus(VectorSource(TO[,1]))
myCorpus <- tm_map(TO, tolower)
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
myCorpus <- tm_map(myCorpus, removeNumbers)
myStopwords <- c(stopwords('spanish'), "available", "via")
myStopwords <- c(stopwords('spanish'))
myCorpus <- tm_map(myCorpus, removeWords, myStopwords)
myDtm <- TermDocumentMatrix(myCorpus, control = list(minWordLength = 1))
findFreqTerms(myDtm, lowfreq=10)
findAssocs(myDtm, 'acuerdo', 0.30)
findAssocs(myDtm, 'acuerdo', 0.20)
findAssocs(myDtm, 'acuerdo', 0.10)
library(arules)
ENCUESTA_TABULADA[,13]=as.factor(ENCUESTA_TABULADA[,13])
ENCUESTA_TABULADA <- read.csv("~/Downloads/ENCUESTA_TABULADA.csv")
View(ENCUESTA_TABULADA)
ENCUESTA_TABULADA[,13]=as.factor(ENCUESTA_TABULADA[,13])
ENCUESTA_TABULADA[,17]=as.factor(ENCUESTA_TABULADA[,17])
rules <- apriori(ENCUESTA_TABULADA[,5:33])
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.5, conf = 0.5))
inspect(rules)
library(arulesViz)
plot(rules, method="graph", control=list(type="items"))
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.8, conf = 0.8))
plot(rules, method="graph", control=list(type="items"))
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.8, conf = 1))
plot(rules, method="graph", control=list(type="items"))
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.9, conf = 1))
plot(rules, method="graph", control=list(type="items"))
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.9, conf = 0.9))
plot(rules, method="graph", control=list(type="items"))
rules.pruned <- rules.sorted[!redundant]
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.8, conf = 0.9))
rules <- apriori(ENCUESTA_TABULADA[,5:33],parameter = list(supp = 0.9, conf =1))
plot(rules, method="graph", control=list(type="items"))
inspect(rules)
inspect(rules)
par <- read.csv("~/Downloads/par.csv")
View(par)
hist(par[,1])
hist(par[,2])
boxplot(par[,2])
boxplot(par[,1])
hist(par[,1])
summary(par)
sd(par[,1])
sd(par[,2])
plot(c(0.2831, 0.9513), c(0.1695374,0.1846217))
parln=lm(par[,1]~par[,2])
summary(parln)
plot(par)
bagplot(par[,1], par[,2])
library(plotly)
install.packages("plotly")
plor(par)
plot(par)
install.packages("shiny")
library(shiny)
hist(c(0.7483, 0.7473, 2.0298, 0,7318))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
require(devtools)
install.packages(devtools)
install.packages("devtools")
install.packages("shiny")
runAPP("my_app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("devtools")
library(devtools)
versin
version
packageStatus()
version
install.packages("devtools")
library(devtools)
tasauso <- read.csv("~/Downloads/tasauso.csv")
View(tasauso)
tasauso
tn=ts(tasauso[,2],frequency=12)
plot(tn)
tn=ts(tasauso[,2],frequency=12,start=10)
plot(tn)
tn=ts(tasauso[4:73,2],frequency=12,start=2009)
plot(tn)
ti=ts(tasauso[4:73,3],frequency=12,start=2009)
plot(ti)
plot(decompose(tn))
plot(decompose(ti))
tnfit=arima(tn, order(1,0,0),list(order=c(2,1,0),period=12))
tnfit=arima(tn, order(1,0,0),seasonal=list(order=c(2,1,0),period=12))
tnfit=arima(tn)
foretnfit=predict(tnfit,n.ahead=122)
plot(tnfit)
plot(foretnfit)
plot(foretnfit$pred)
tnfit=arima(tn, order(1,0,0),seasonal=list(order=c(1,1,0),period=12))
tnfit=arima(tn, order(1,0,0))
tnfit=arima(tn, order=c(1,0,0),seasonal=list(order=c(1,1,0),period=12))
plot(foretnfit$pred)
foretnfit=predict(tnfit,n.ahead=122)
plot(foretnfit$pred)
tnfit=arima(tn, order=c(1,0,0),seasonal=list(order=c(2,1,0),period=12))
foretnfit=predict(tnfit,n.ahead=122)
plot(foretnfit$pred)
ts.plot(tn, foretnfit)
ts.plot(tn, foretnfit$pred)
tndatapred=data.frame(foretnfit$pred,foretnfit$se)
View(tndatapred)
View(tndatapred)
APGPRICAB <- read.csv("~/Downloads/APGPRICAB.csv")
View(APGPRICAB)
tsAPG=ts(APGPRICAB$APG,frequency=12)
plot(tsAPG)
trbAPG=ts(APGPRICAB$APG,frequency=12)
plot(trbAPG)
plot(decompose(trbAPG))
trbAPG=ts(APGPRICAB$APG,frequency=12, start=2009)
plot(trbAPG)
plot(decompose(trbAPG))
trbapgfit=arima(trbAPG, order=c(1,0,0),seasonal=list(order=c(2,1,0),period=12))
foretrbapgfit=predict(trbapgfit,n.ahead=122)
trbPRI=ts(APGPRICAB$PRI,frequency=12, start=2009)
plot(trbPRI)
plot(decompose(trbPRI))
trbprifit=arima(trbPRI, order=c(1,0,0),seasonal=list(order=c(2,1,0),period=12))
foretrbprifit=predict(trbprifit,n.ahead=122)
apgpri=data.frame(foretrbapgfit$pred,foretrbprifit$pred)
View(apgpri)
View(apgpri)
ts.plot(trbPRI, foretrbPRIfit$pred)
ts.plot(trbPRI, foretrbprifit$pred)
require(devtools)
install_github('rCharts', 'ramnathv')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
library(rCharts)
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
summary(APGPRICAB)
Twitter <- read.csv("~/Documents/Twitter.csv")
View(Twitter)
plot(Twitter)
row.names(Twitter)=Twitter[,1]
Twitter <- read.csv("~/Documents/Twitter.csv")
View(Twitter)
row.names(Twitter)=Twitter[,1]
Twitter=Twitter[,2:8]
plot(Twitter)
d <- dist(as.matrix(Twitter))
hc <- hclust(d)
plot(hc)
plot(Twitter)
TwitterKm=kmeans(Twitter,2)
plot(Twitter, col=TwitterKm$cluster)
View(data.frame(Twitter,TwitterKm$cluster))
View(data.frame(Twitter[,1],TwitterKm$cluster))
TwitterKm=kmeans(Twitter,3)
plot(Twitter, col=TwitterKm$cluster)
TwitterKm=kmeans(Twitter,2)
plot(Twitter, col=TwitterKm$cluster)
TwitterKm=kmeans(Twitter,3)
View(data.frame(Twitter[,1],TwitterKm$cluster))
Twitter
source('~/.active-rstudio-document')
library(shiny)
x    <- Twitter[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
import("shiny")
import.library("shiny")
titlePanel("!"),
# draw the histogram with the specified number of bins
titlePanel("prueba!"),
hist(x, breaks = bins, col = 'darkgray', border = 'white')
titlePanel("ppp"),
y
})
})
runAPP("my_app")
shiny::runApp()
install.packages("shiny")
source('~/.active-rstudio-document')
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
Twitter_Kmean=kmeans(Twitter,2)
summary(Twitter_Kmean)
Twitter_Kmean$cluster
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("fpc")
shiny::runApp()
shiny::runApp()
library(fpc)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(mclust)
install.packages("mclust")
install.packages("mclust")
library(mclust)
shiny::runApp()
Twitter_fit <- Mclust(Twitter)
library(mclust)
Twitter_fit <- Mclust(Twitter)
plot(Twitter_fit)
plot(Twitter_fit)
shiny::runApp()
shiny::runApp()
library(fpc)
Twitter_Kmean=kmeans(Twitter,3)
plotcluster(Twitter_fit, Twitter_Kmean$cluster)
install.packages("cluster")
install.packages("cluster")
library(cluster)
clusplot(Twitter, Twitter_Kmean$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
shiny::runApp()
boxplot(Twitter)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runGitHub( "desarrollo", "pechever")
runGitHub( "dataproduct", "pechever")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
title: "Exercise"
title: "Exercise"
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='pecheverr', token='B27117B412D4F0D064845F2CA30C7444', secret='uFwm0OR6wrLlR2Zfe7UeE4ny/xzVk/vmYAxeEvdd')
library(shinyapps)
shinyapps::deployApp()
shinyapps::deployApp("/Users/fabricio")
shiny::runApp()
shiny::runApp()
shiny::runApp('/AppR')
shinyapps::deployApp("/AppR")
shiny::runApp('/AppR')
shiny::runApp('/AppR')
shiny::runApp('/AppR')
shinyapps::deployApp("/AppR")
devtools::install_github("cluster")
devtools::install_github('cluster')
devtools::install_github('rstudio/cluster')
devtools::install_github('rstudio/cluster')
devtools::install_github("jcheng5/googleCharts")
devtools::install_github('pecheverr/cluster')
devtools::install_github('Twitter')
devtools::install_github('cluster','pecheverr' )
devtools::install_github('cluster','pechever' )
devtools::install_github("cluster", "rstudio")
devtools::install_github("cluster", "pechever")
devtools::install_github("cluster", "pecheverr")
shinyapps::deployApp("/AppR")
shinyapps::deployApp("/AppR")
shinyapps::deployApp("/AppR")
shinyapps::deployApp("/AppR")
shinyapps::deployApp("/AppR")
shiny::runApp('/AppR')
shiny::runApp('/AppR')
shiny::runApp('/AppR')
shiny::runApp('/AppR')
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
View(correa)
author("pecheverr")
slidify("index.Rmd")
slidify("index.Rmd")
openURL(index.html)
slidify("index.Rmd")
plot(iris)
slidify("index.Rmd")
slidify("index.Rmd")
plot(iris)
source('~/.active-rstudio-document', echo=TRUE)
```{r}
slidify("index.Rmd")
plot(kmean,col=iris_kmean$clusters)
iris_kmean=kmean(iris,2)
d
